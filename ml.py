# лимит на длину статьи
import json

TEXT_LIMIT = 5000
CHUNK_SIZE = 3000


def text_processing(raw_text: str) -> str:
    # with open(filename, encoding="utf-8") as text_file:
    #     raw_text = text_file.read()
    if len(raw_text) > 3400:
        chunks = [raw_text[index: index + CHUNK_SIZE] for index in range(0, len(raw_text), CHUNK_SIZE)]
        text = "\n".join([f"ЧАСТЬ {index + 1}\n{chunk}" for index, chunk in enumerate(chunks)])
    else:
        text = raw_text
    text += '\n\nКОНЕЦ'
    return text


def create_prompt(text: str, filename: str) -> list[str]:
    with open(filename, encoding="utf-8") as prompt_file:
        prompt = prompt_file.read()
    prompt += (
        f"Сократи итоговый получившийся текст, длина статьи не должна превышать {TEXT_LIMIT} "
        f"символов (например, из каждого абзаца можно исключить незначимые, лишние предложения, либо переформулировать "
        f"мысль абзаца более коротко). Вот поэтому сначала необходимо всё выслушать. Если длина получившейся статьи больше, "
        f"чем ты можешь написать за одно сообщение, я буду ждать продолжение в следующем твоём сообщении."
    )
    prompt += "\n\n" + text
    chunks = prompt.split("ЧАСТЬ")

    if len(chunks) == 1:
        return chunks
    elif len(chunks) >= 2:
        prompts = [chunks[0].strip() + "\nЧАСТЬ " + chunks[1].strip()]
        prompts += ["\nЧАСТЬ " + chunks[i] for i in range(2, len(chunks))]
        return prompts


def decode_text(text: str):
    return  bytes(text, "utf-8").decode('unicode-escape')


# if __name__ == "__main__":
#     with open("foo.json", "r") as file:
#         data.
#     print(data)
#     with open("foo1.json", "w") as file:
#         json.dump(data, file, ensure_ascii=True)
#     exit(0)
#
#     raw = "[00:00.000 - 00:10.160] Начинайте копить на осуществление своей мечты, но срываетесь и тратите отложенные\n[00:10.160 - 00:12.240] деньги на что-то другое, знакомо, правда?\n[00:12.240 - 00:13.840] Сегодня разберемся, как это исправить.\n[00:13.840 - 00:21.800] Чаще всего мы говорим себе, жвем один раз, нужно больше\n[00:21.800 - 00:23.520] радовать себя и близких.\n[00:23.520 - 00:26.840] Но ведь накопление – это не экономия, а наоборот инвестиция.\n[00:26.920 - 00:30.240] С ростом накоплений появляется больше уверенности и даже больше свободы.\n[00:30.240 - 00:34.640] Вторая ошибочная установка – это уверенность, что нужно откладывать много, а для этого\n[00:34.640 - 00:36.240] необходимо иметь солидную зарплату.\n[00:36.240 - 00:39.800] На самом деле, начинать копить можно даже с маленькой суммы.\n[00:44.800 - 00:45.960] Определитесь целью.\n[00:45.960 - 00:51.080] Цель должна быть важная для вас, максимально конкретной, достижимой и измеримой.\n[00:51.080 - 00:56.280] Например, это может быть новая машина, поездка в отпуск или образование ребенка.\n[00:57.280 - 01:01.800] Рассчитайте, какой должна быть сумма ежемесячного взноса для ваших целей.\n[01:01.800 - 01:06.960] Какие инструменты, преумножения и накопления средств наиболее оптимальны для вашей цели?\n[01:06.960 - 01:10.480] Докопительный счет самый легкий и удобный способ начать копить.\n[01:10.480 - 01:13.680] Вы создаете его в приложении банка, добавляете любые суммы,\n[01:13.680 - 01:15.440] как только у вас появляется возможность.\n[01:15.440 - 01:20.200] За обслуживание такого счета банки не берут деньги, а жесткие условия и граничения отсутствуют.\n[01:20.200 - 01:25.080] Вы можете в любое время снять деньги, потратить их на необходимые вещи или услуги.\n[01:25.280 - 01:29.080] При этом есть некоторая дисциплина, вы постоянно что-то откладываете.\n[01:29.080 - 01:31.840] Какая тактика накоплений подходит именно вам?\n[01:31.840 - 01:35.080] Например, вы можете включить опцию авто накоплений.\n[01:35.080 - 01:40.640] Цервис будет автоматически переводить средства с вашего основного счета на накопительный.\n[01:40.640 - 01:44.160] Или, например, вы можете пройти челлендж на 52 недели.\n[01:44.160 - 01:47.680] Суть этого челленджа в том, чтобы каждую неделю откладывать небольшую сумму.\n[01:47.680 - 01:50.360] Но при этом ее каждый раз нужно немного увеличивать.\n[01:50.360 - 01:54.360] Как вы будете контролировать и корректировать выполнение планы в течение года?\n[01:54.840 - 01:58.040] Я всегда вам будет удаваться откладывать нужную сумму ежемесячно.\n[01:58.040 - 02:02.760] В этом случае вам необходимо будет запланировать увеличение взносов в будущем месяце.\n[02:02.760 - 02:08.280] Или же исходя из расчетов, вы поймете, что ваша премия на работе покроет недостаток в конце года.\n[02:08.280 - 02:11.280] Будьте здоровы и финансовограммовны!\n"
#     test_text = text_processing(raw)
#     print(test_text, end="\n\n-----\n\n")
#     test_prompts = create_prompt(test_text, "Prompt.txt")
#     print(*test_prompts, sep="\n\n-----\n\n")
